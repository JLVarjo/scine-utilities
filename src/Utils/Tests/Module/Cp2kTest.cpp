/**
 * @file
 * @copyright This code is licensed under the 3-clause BSD license.\n
 *            Copyright ETH Zurich, Department of Chemistry and Applied Biosciences, Reiher Group.\n
 *            See LICENSE.txt for details.
 */
#include <Utils/Bonds/BondDetector.h>
#include <Utils/ExternalQC/Cp2k/Cp2kCalculator.h>
#include <Utils/ExternalQC/Cp2k/Cp2kCalculatorSettings.h>
#include <Utils/ExternalQC/Cp2k/Cp2kCutoffData.h>
#include <Utils/ExternalQC/Cp2k/Cp2kCutoffOptimizer.h>
#include <Utils/ExternalQC/Cp2k/Cp2kMainOutputParser.h>
#include <Utils/ExternalQC/Exceptions.h>
#include <Utils/Geometry/ElementTypes.h>
#include <Utils/IO/ChemicalFileFormats/XyzStreamHandler.h>
#include <Utils/IO/NativeFilenames.h>
#include <gmock/gmock.h>
#include <boost/dll/runtime_symbol_info.hpp>
#include <boost/filesystem.hpp>
#include <regex>

using namespace testing;
namespace Scine {
namespace Utils {
namespace Tests {

class ACp2kTest : public Test {
 public:
  ExternalQC::Cp2kCalculator calculator;
  boost::filesystem::path pathToResource;

  void siSetUp() {
    calculator.settings().modifyString(Utils::ExternalQC::SettingsNames::baseWorkingDirectory, pathToResource.string());
    calculator.settings().modifyString(Utils::SettingsNames::basisSet, "SZV-MOLOPT-GTH");

    double length = 5.430697500 * Constants::bohr_per_angstrom;
    std::string pbcString =
        std::to_string(length) + "," + std::to_string(length) + "," + std::to_string(length) + "," + "90.0,90.0,90.0";
    calculator.settings().modifyString(Utils::SettingsNames::periodicBoundaries, pbcString);
    std::stringstream stream("8\n\n"
                             "Si    0.000000000    0.000000000    0.000000000\n"
                             "Si    0.000000000    2.715348700    2.715348700\n"
                             "Si    2.715348700    2.715348700    0.000000000\n"
                             "Si    2.715348700    0.000000000    2.715348700\n"
                             "Si    4.073023100    1.357674400    4.073023100\n"
                             "Si    1.357674400    1.357674400    1.357674400\n"
                             "Si    1.357674400    4.073023100    4.073023100\n"
                             "Si    4.073023100    4.073023100    1.357674400\n");
    auto structure = Utils::XyzStreamHandler::read(stream);
    calculator.setStructure(structure);
  }

 private:
  void SetUp() final {
    pathToResource = boost::dll::program_location().parent_path();
    pathToResource /= "Resources";
    calculator.settings().modifyString(Utils::SettingsNames::method, "PBE");
  }
};

TEST_F(ACp2kTest, SettingsAreSetCorrectly) {
  calculator.settings().modifyString(Utils::SettingsNames::method, "BLYP-D3BJ");
  calculator.settings().modifyString(Utils::SettingsNames::basisSet, "SZV-MOLOPT-GTH");
  calculator.settings().modifyString(Utils::ExternalQC::SettingsNames::baseWorkingDirectory, "test_1");
  calculator.settings().modifyString(Utils::SettingsNames::periodicBoundaries, "10,10,10,90,90,90");
  calculator.settings().modifyInt(Utils::SettingsNames::externalProgramNProcs, 2);
  calculator.settings().modifyDouble(Utils::SettingsNames::selfConsistenceCriterion, 0.0001);
  calculator.settings().modifyInt(Utils::SettingsNames::molecularCharge, 1);
  calculator.settings().modifyInt(Utils::SettingsNames::spinMultiplicity, 2);
  calculator.settings().modifyInt(Utils::SettingsNames::maxScfIterations, 125);
  calculator.settings().modifyString(Utils::SettingsNames::spinMode, "unrestricted");
  calculator.settings().modifyString(Utils::ExternalQC::SettingsNames::cp2kFilenameBase, "test_2");
  calculator.settings().modifyDouble(Utils::SettingsNames::temperature, 300.3);
  calculator.settings().modifyDouble(ExternalQC::SettingsNames::planeWaveCutoff, 200.0);
  calculator.settings().modifyDouble(ExternalQC::SettingsNames::relMultiGridCutoff, 40.0);
  calculator.settings().modifyInt(ExternalQC::SettingsNames::nGrids, 4);
  calculator.settings().modifyBool(ExternalQC::SettingsNames::deleteTemporaryFiles, false);
  calculator.settings().modifyString(Utils::SettingsNames::scfDamping, "direct_p_mixing");
  calculator.settings().modifyDouble(Utils::SettingsNames::electronicTemperature, 300.0);
  calculator.settings().modifyInt(ExternalQC::SettingsNames::additionalMos, 20);
  calculator.settings().modifyString(ExternalQC::SettingsNames::orbitalTransformation, "cg");
  calculator.settings().modifyInt(ExternalQC::SettingsNames::outerScf, 20);
  calculator.settings().modifyString(ExternalQC::SettingsNames::poissonSolver, "periodic");
  calculator.settings().modifyBool(ExternalQC::SettingsNames::allowUnconvergedScf, true);
  calculator.settings().modifyBool(ExternalQC::SettingsNames::dipoleCorrection, true);
  calculator.settings().modifyString(ExternalQC::SettingsNames::additionalOutputFile, "additional_output");
  calculator.settings().modifyBool(ExternalQC::SettingsNames::enforceScfCriterion, true);

  ASSERT_TRUE(calculator.settings().valid());
  ASSERT_THAT(calculator.settings().getInt(Utils::SettingsNames::externalProgramNProcs), Eq(2));
  ASSERT_THAT(calculator.settings().getDouble(Utils::SettingsNames::selfConsistenceCriterion), Eq(0.0001));
  ASSERT_THAT(calculator.settings().getInt(Utils::SettingsNames::molecularCharge), Eq(1));
  ASSERT_THAT(calculator.settings().getInt(Utils::SettingsNames::spinMultiplicity), Eq(2));
  ASSERT_THAT(calculator.settings().getInt(Utils::SettingsNames::maxScfIterations), Eq(125));
  ASSERT_THAT(calculator.settings().getString(Utils::SettingsNames::method), Eq("BLYP-D3BJ"));
  ASSERT_THAT(calculator.settings().getString(Utils::SettingsNames::basisSet), Eq("SZV-MOLOPT-GTH"));
  ASSERT_THAT(calculator.settings().getString(Utils::SettingsNames::spinMode), Eq("unrestricted"));
  ASSERT_THAT(calculator.settings().getString(Utils::ExternalQC::SettingsNames::baseWorkingDirectory), Eq("test_1"));
  ASSERT_THAT(calculator.settings().getString(Utils::ExternalQC::SettingsNames::cp2kFilenameBase), Eq("test_2"));
  ASSERT_THAT(calculator.settings().getDouble(Utils::SettingsNames::temperature), Eq(300.3));
  ASSERT_THAT(calculator.settings().getString(Utils::SettingsNames::periodicBoundaries), Eq("10,10,10,90,90,90"));
  ASSERT_THAT(calculator.settings().getDouble(ExternalQC::SettingsNames::planeWaveCutoff), Eq(200.0));
  ASSERT_THAT(calculator.settings().getDouble(ExternalQC::SettingsNames::relMultiGridCutoff), Eq(40.0));
  ASSERT_THAT(calculator.settings().getInt(ExternalQC::SettingsNames::nGrids), Eq(4));
  ASSERT_THAT(calculator.settings().getBool(ExternalQC::SettingsNames::deleteTemporaryFiles), Eq(false));
  ASSERT_THAT(calculator.settings().getString(Utils::SettingsNames::scfDamping), Eq("direct_p_mixing"));
  ASSERT_THAT(calculator.settings().getDouble(Utils::SettingsNames::electronicTemperature), Eq(300.0));
  ASSERT_THAT(calculator.settings().getInt(ExternalQC::SettingsNames::additionalMos), Eq(20));
  ASSERT_THAT(calculator.settings().getString(ExternalQC::SettingsNames::orbitalTransformation), Eq("cg"));
  ASSERT_THAT(calculator.settings().getInt(ExternalQC::SettingsNames::outerScf), Eq(20));
  ASSERT_THAT(calculator.settings().getString(ExternalQC::SettingsNames::poissonSolver), Eq("periodic"));
  ASSERT_THAT(calculator.settings().getBool(ExternalQC::SettingsNames::allowUnconvergedScf), Eq(true));
  ASSERT_THAT(calculator.settings().getBool(ExternalQC::SettingsNames::dipoleCorrection), Eq(true));
  ASSERT_THAT(calculator.settings().getString(ExternalQC::SettingsNames::additionalOutputFile),
              Eq("additional_output"));
  ASSERT_THAT(calculator.settings().getBool(ExternalQC::SettingsNames::enforceScfCriterion), Eq(true));
}

TEST_F(ACp2kTest, ErrorsAreFound) {
  ExternalQC::Cp2kMainOutputParser parser((pathToResource / "cp2k_scf_fail_test_calc.out").string());
  ASSERT_THROW(parser.checkForErrors(), ExternalQC::ScfNotConvergedError);
}

TEST_F(ACp2kTest, OutputIsParsedCorrectly) {
  ExternalQC::Cp2kMainOutputParser parser((pathToResource / "cp2k_energy_test_calc.out").string());

  ASSERT_THAT(parser.getEnergy(), DoubleNear(-31.297887033561647, 1e-15));
  Eigen::MatrixXd refGrad(8, 3);
  // clang-format off
  refGrad << -0.000000004461456316, -0.000000004461652731, -0.000000004461471152,
             -0.000000004449944969, -0.000000013052460107, -0.000000013052897533,
             -0.000000013052937403, -0.000000013053639276, -0.000000004449563837,
             -0.000000013052867274, -0.000000004450045879, -0.000000013053521814,
              0.000000004474909236,  0.000000012994192823,  0.000000004472521034,
              0.000000012985998542,  0.000000012988187148,  0.000000012988473145,
              0.000000012996315928,  0.000000004475182105,  0.000000004475398533,
              0.000000004475134912,  0.000000004475384855,  0.000000012992080017;
  // clang-format on
  GradientCollection grad = parser.getGradients();
  for (int i = 0; i < 8; ++i) {
    for (int j = 0; j < 3; ++j) {
      ASSERT_THAT(grad(i, j), DoubleNear(refGrad(i, j), 1e-18));
    }
  }
  auto charges = parser.getHirshfeldCharges();
  for (const auto& charge : charges) {
    ASSERT_LT(charge, 1e-3); // partial charges 0 in elemental crystal
  }
  // do proper charges
  ExternalQC::Cp2kMainOutputParser parser2((pathToResource / "cp2k_charges_test_calc.out").string());
  std::vector<double> refCharges = {-1.042, 0.556, 0.556};
  charges = parser2.getHirshfeldCharges();
  for (unsigned long i = 0; i < refCharges.size(); ++i) {
    ASSERT_DOUBLE_EQ(charges[i], refCharges[i]);
  }
  // check grid counts
  std::vector<int> refGridCounts = {360, 4516, 7804, 3048};
  auto gridCounts = parser.getGridCounts();
  for (unsigned long i = 0; i < gridCounts.size(); ++i) {
    ASSERT_EQ(gridCounts[i], refGridCounts[i]);
  }
  // check stress tensor
  Eigen::Matrix3d refStress;
  // clang-format off
  refStress << 0.05594641, -0.01426121,  0.00000000,
              -0.01426121,  0.04939261, -0.00000000,
               0.00000000, -0.00000000, -0.00042539;
  // clang-format on
  // adapt to right unit
  refStress *= 1e9 * Constants::hartree_per_joule * std::pow(Constants::meter_per_bohr, 3);
  auto stress = parser.getStressTensor();
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < 3; ++j) {
      ASSERT_THAT(stress(i, j), DoubleNear(refStress(i, j), 1e-8));
    }
  }
}

TEST_F(ACp2kTest, HessianOutputIsParsedCorrectly) {
  ExternalQC::Cp2kMainOutputParser parser((pathToResource / "cp2k_hessian_test_calc.out").string());
  int nAtoms = 8;
  ASSERT_THAT(parser.getEnergy(), DoubleNear(-31.297887032, 1e-9));
  Eigen::MatrixXd refGrad(nAtoms, 3);
  // clang-format off
  refGrad << -0.000000005, -0.000000005, -0.000000005,
             -0.000000004, -0.000000013, -0.000000013,
             -0.000000013, -0.000000013, -0.000000004,
             -0.000000013, -0.000000004, -0.000000013,
              0.000000005,  0.000000013,  0.000000005,
              0.000000012,  0.000000012,  0.000000012,
              0.000000013,  0.000000005,  0.000000005,
              0.000000005,  0.000000005,  0.000000013;
  // clang-format on
  GradientCollection grad = parser.getGradients();
  for (int i = 0; i < nAtoms; ++i) {
    for (int j = 0; j < 3; ++j) {
      ASSERT_THAT(grad(i, j), DoubleNear(refGrad(i, j), 1e-9));
    }
  }

  HessianMatrix refHess(nAtoms * 3, nAtoms * 3);
  // clang-format off
  refHess <<  1.172029,    0.000000,    -0.000000,     1.540134,    -0.000000,  -0.000000,     0.451257,     0.000000,     0.000001,     0.451257,    0.000001,     0.000001,    -0.903653,     1.014601,    -1.014602,   -0.903652,    -1.014601,    -1.014601,    -0.903653,     1.014602,    1.014601,    -0.903653,    -1.014602,     1.014601,
             -0.000000,    1.172028,    -0.000001,     0.000001,     0.451257,   0.000000,     0.000000,     0.451257,     0.000001,     0.000000,    1.540134,    -0.000000,     1.014602,    -0.903653,     1.014602,   -1.014601,    -0.903652,    -1.014601,     1.014601,    -0.903653,   -1.014601,    -1.014602,    -0.903653,     1.014601,
             -0.000000,   -0.000000,     1.172029,     0.000001,     0.000000,   0.451257,    -0.000000,    -0.000000,     1.540134,     0.000000,    0.000001,     0.451257,    -1.014602,     1.014601,    -0.903653,   -1.014601,    -1.014601,    -0.903652,     1.014601,    -1.014602,   -0.903653,     1.014602,     1.014602,    -0.903653,
              1.540134,   -0.000000,    -0.000000,     1.172030,    -0.000001,  -0.000000,     0.451257,     0.000000,     0.000001,     0.451257,    0.000000,     0.000000,    -0.903652,    -1.014601,     1.014601,   -0.903653,     1.014601,     1.014601,    -0.903651,    -1.014601,   -1.014601,    -0.903652,     1.014601,    -1.014601,
              0.000001,    0.451257,    -0.000000,    -0.000000,     1.172029,  -0.000000,    -0.000001,     1.540134,    -0.000000,     0.000001,    0.451257,     0.000000,    -1.014601,    -0.903652,     1.014602,    1.014601,    -0.903653,    -1.014601,    -1.014601,    -0.903652,   -1.014601,     1.014601,    -0.903652,     1.014602,
              0.000000,    0.000000,     0.451257,    -0.000000,     0.000000,   1.172029,     0.000001,     0.000001,     0.451257,    -0.000001,   -0.000000,     1.540134,     1.014601,     1.014602,    -0.903652,    1.014601,    -1.014602,    -0.903653,    -1.014601,    -1.014601,   -0.903652,    -1.014601,     1.014601,    -0.903652,
              0.451257,   -0.000000,     0.000001,     0.451257,     0.000000,   0.000001,     1.172029,    -0.000000,    -0.000001,     1.540134,   -0.000000,    -0.000001,    -0.903652,     1.014602,     1.014601,   -0.903653,    -1.014601,     1.014601,    -0.903652,     1.014602,   -1.014602,    -0.903652,    -1.014601,    -1.014601,
              0.000000,    0.451257,     0.000001,    -0.000000,     1.540134,  -0.000001,     0.000000,     1.172029,    -0.000001,     0.000001,    0.451257,     0.000001,     1.014602,    -0.903652,    -1.014601,   -1.014602,    -0.903653,     1.014601,     1.014601,    -0.903652,    1.014601,    -1.014601,    -0.903652,    -1.014601,
             -0.000000,   -0.000000,     1.540134,     0.000001,     0.000000,   0.451257,    -0.000001,    -0.000000,     1.172030,     0.000000,    0.000001,     0.451257,     1.014601,    -1.014601,    -0.903652,    1.014601,     1.014601,    -0.903653,    -1.014601,     1.014601,   -0.903652,    -1.014601,    -1.014602,    -0.903651,
              0.451257,    0.000001,    -0.000000,     0.451257,     0.000001,   0.000001,     1.540134,    -0.000001,    -0.000000,     1.172029,   -0.000001,     0.000000,    -0.903652,    -1.014601,    -1.014601,   -0.903653,     1.014601,    -1.014602,    -0.903652,    -1.014601,    1.014602,    -0.903652,     1.014601,     1.014601,
             -0.000000,    1.540134,    -0.000000,     0.000001,     0.451257,   0.000000,     0.000001,     0.451257,     0.000000,    -0.000000,    1.172030,    -0.000001,    -1.014601,    -0.903651,    -1.014601,    1.014601,    -0.903653,     1.014601,    -1.014601,    -0.903652,    1.014602,     1.014601,    -0.903652,    -1.014601,
              0.000000,    0.000001,     0.451257,    -0.000001,    -0.000001,   1.540134,     0.000000,     0.000001,     0.451257,    -0.000000,   -0.000000,     1.172029,    -1.014601,    -1.014601,    -0.903652,   -1.014602,     1.014601,    -0.903653,     1.014602,     1.014601,   -0.903652,     1.014602,    -1.014601,    -0.903652,
             -0.903652,    1.014601,    -1.014602,    -0.903653,    -1.014602,   1.014601,    -0.903652,     1.014602,     1.014601,    -0.903652,   -1.014601,    -1.014601,     1.172029,    -0.000000,    -0.000001,    0.451257,     0.000000,     0.000000,     0.451257,    -0.000000,   -0.000000,     1.540134,     0.000000,    -0.000000,
              1.014601,   -0.903651,     1.014601,    -1.014602,    -0.903652,   1.014601,     1.014601,    -0.903653,    -1.014601,    -1.014601,   -0.903653,    -1.014601,     0.000000,     1.172029,    -0.000000,   -0.000000,     1.540134,    -0.000000,     0.000000,     0.451257,    0.000000,     0.000001,     0.451257,    -0.000000,
             -1.014601,    1.014601,    -0.903652,     1.014601,     1.014602,  -0.903653,     1.014602,    -1.014602,    -0.903652,    -1.014601,   -1.014601,    -0.903652,    -0.000001,     0.000000,     1.172029,    0.000000,     0.000001,     0.451257,    -0.000001,     0.000001,    1.540134,    -0.000000,     0.000000,     0.451257,
             -0.903652,   -1.014601,    -1.014601,    -0.903653,     1.014601,   1.014601,    -0.903652,    -1.014602,     1.014601,    -0.903652,    1.014601,    -1.014602,     0.451257,    -0.000001,     0.000000,    1.172030,    -0.000000,    -0.000000,     1.540134,    -0.000000,   -0.000000,     0.451257,     0.000000,    -0.000001,
             -1.014601,   -0.903652,    -1.014601,     1.014601,    -0.903652,  -1.014602,    -1.014602,    -0.903652,     1.014601,     1.014601,   -0.903652,     1.014601,    -0.000001,     1.540134,    -0.000001,   -0.000000,     1.172030,    -0.000000,    -0.000000,     0.451257,   -0.000000,     0.000000,     0.451257,    -0.000001,
             -1.014601,   -1.014601,    -0.903653,     1.014601,    -1.014602,  -0.903652,     1.014601,     1.014601,    -0.903652,    -1.014601,    1.014601,    -0.903652,     0.000000,    -0.000001,     0.451257,   -0.000000,    -0.000000,     1.172030,    -0.000000,    -0.000000,    0.451257,    -0.000001,    -0.000000,     1.540134,
             -0.903652,    1.014601,     1.014601,    -0.903652,    -1.014601,  -1.014601,    -0.903653,     1.014601,    -1.014602,    -0.903653,   -1.014601,     1.014601,     0.451257,     0.000000,     0.000000,    1.540134,    -0.000000,     0.000000,     1.172029,     0.000000,    0.000000,     0.451257,     0.000000,     0.000000,
              1.014601,   -0.903652,    -1.014601,    -1.014601,    -0.903652,  -1.014601,     1.014602,    -0.903652,     1.014601,    -1.014602,   -0.903653,     1.014601,     0.000000,     0.451257,    -0.000000,    0.000001,     0.451257,     0.000000,     0.000000,     1.172029,   -0.000001,     0.000000,     1.540134,    -0.000000,
              1.014601,   -1.014602,    -0.903652,    -1.014601,    -1.014601,  -0.903652,    -1.014602,     1.014601,    -0.903652,     1.014602,    1.014601,    -0.903653,     0.000000,    -0.000000,     1.540134,    0.000001,     0.000001,     0.451257,     0.000000,    -0.000000,    1.172029,    -0.000000,     0.000000,     0.451257,
             -0.903652,   -1.014602,     1.014601,    -0.903652,     1.014601,  -1.014602,    -0.903652,    -1.014601,    -1.014601,    -0.903652,    1.014601,     1.014602,     1.540134,    -0.000001,     0.000001,    0.451257,    -0.000000,     0.000000,     0.451257,    -0.000000,    0.000000,     1.172029,    -0.000001,     0.000000,
             -1.014601,   -0.903652,     1.014602,     1.014601,    -0.903652,   1.014602,    -1.014602,    -0.903652,    -1.014601,     1.014601,   -0.903652,    -1.014602,    -0.000000,     0.451257,    -0.000000,    0.000000,     0.451257,     0.000000,    -0.000000,     1.540134,    0.000000,    -0.000001,     1.172029,     0.000000,
              1.014601,    1.014601,    -0.903652,    -1.014601,     1.014601,  -0.903652,    -1.014601,    -1.014601,    -0.903652,     1.014601,   -1.014602,    -0.903653,     0.000001,     0.000000,     0.451257,   -0.000000,    -0.000000,     1.540134,     0.000000,     0.000001,    0.451257,     0.000000,     0.000000,     1.172029;
  // clang-format on
  auto hess = parser.getHessian();
  for (int i = 0; i < nAtoms * 3; ++i) {
    for (int j = 0; j < nAtoms * 3; ++j) {
      ASSERT_THAT(hess(i, j), DoubleNear(refHess(i, j), 1e-6));
    }
  }
}

TEST_F(ACp2kTest, DensityMatricesAreParsedCorrectly) {
  ExternalQC::Cp2kMainOutputParser parser((pathToResource / "cp2k_bo_test_calc.out").string());
  auto densityMatrix = parser.getDensityMatrix(SpinMode::Restricted);
  Eigen::MatrixXd refDensity(23, 23);
  // clang-format off
  refDensity <<
     1.491160, -0.042604, -0.438656,  0.000000, -0.338780, -0.053274,  0.000000, -0.041169, -0.022985,  0.000000,  0.001283,  0.000000,  0.006001,  0.103483, -0.006399, -0.020934,  0.000000, -0.054696,  0.103549, -0.006345, -0.058243,  0.000000, -0.006476,
    -0.042604,  0.014719, -0.085034,  0.000000, -0.065633,  0.004682,  0.000000,  0.003597, -0.002281,  0.000000,  0.003451,  0.000000,  0.000597, -0.046708, -0.002794, -0.004590,  0.000000,  0.004955, -0.046789, -0.002804,  0.003646,  0.000000, -0.005689,
    -0.438656, -0.085034,  1.181211,  0.000000,  0.194095, -0.046563, -0.000000,  0.045537,  0.020789,  0.000000, -0.025570,  0.000000, -0.034886, -0.000674, -0.020728,  0.057549,  0.000000,  0.015288,  0.572390,  0.067538, -0.023630,  0.000000,  0.036825,
     0.000000,  0.000000,  0.000000,  1.788782,  0.000000,  0.000000,  0.053170,  0.000000, -0.000000,  0.041781, -0.000000,  0.032275,  0.000000, -0.000000, -0.000000, -0.000000,  0.095499,  0.000000, -0.000000, -0.000000,  0.000000,  0.095535, -0.000000,
    -0.338780, -0.065633,  0.194095,  0.000000,  1.079949,  0.045534, -0.000000, -0.070128,  0.030946,  0.000000, -0.019758,  0.000000,  0.030073,  0.591670,  0.075240,  0.015678, -0.000000, -0.037217, -0.149798, -0.039051,  0.036435,  0.000000,  0.043991,
    -0.053274,  0.004682, -0.046563,  0.000000,  0.045534,  0.007115,  0.000000, -0.003742,  0.000951,  0.000000,  0.000769,  0.000000,  0.003095,  0.018572,  0.004540, -0.002044,  0.000000,  0.000057, -0.046434, -0.005478,  0.005546,  0.000000, -0.000289,
     0.000000,  0.000000, -0.000000,  0.053170, -0.000000,  0.000000,  0.001580,  0.000000, -0.000000,  0.001242, -0.000000,  0.000959,  0.000000, -0.000000, -0.000000, -0.000000,  0.002839,  0.000000, -0.000000, -0.000000,  0.000000,  0.002840, -0.000000,
    -0.041169,  0.003597,  0.045537,  0.000000, -0.070128, -0.003742,  0.000000,  0.009039, -0.000949,  0.000000,  0.000591,  0.000000, -0.004072, -0.052711, -0.006830,  0.001687,  0.000000,  0.005596,  0.031253,  0.006109, -0.001915,  0.000000, -0.001978,
    -0.022985, -0.002281,  0.020789, -0.000000,  0.030946,  0.000951, -0.000000, -0.000949,  0.001143, -0.000000, -0.000779, -0.000000,  0.000312,  0.013869,  0.001662,  0.001163, -0.000000, -0.000387,  0.002004, -0.000168,  0.001015, -0.000000,  0.001534,
     0.000000,  0.000000,  0.000000,  0.041781,  0.000000,  0.000000,  0.001242,  0.000000, -0.000000,  0.000976, -0.000000,  0.000754,  0.000000, -0.000000, -0.000000, -0.000000,  0.002231,  0.000000, -0.000000, -0.000000,  0.000000,  0.002231, -0.000000,
     0.001283,  0.003451, -0.025570, -0.000000, -0.019758,  0.000769, -0.000000,  0.000591, -0.000779, -0.000000,  0.000902, -0.000000,  0.000203, -0.011220, -0.000776, -0.001358, -0.000000,  0.000830, -0.011224, -0.000775,  0.000461, -0.000000, -0.001523,
     0.000000,  0.000000,  0.000000,  0.032275,  0.000000,  0.000000,  0.000959,  0.000000, -0.000000,  0.000754, -0.000000,  0.000582,  0.000000, -0.000000, -0.000000, -0.000000,  0.001723,  0.000000, -0.000000, -0.000000,  0.000000,  0.001724, -0.000000,
     0.006001,  0.000597, -0.034886,  0.000000,  0.030073,  0.003095,  0.000000, -0.004072,  0.000312,  0.000000,  0.000203,  0.000000,  0.002257,  0.020672,  0.003309, -0.001484, -0.000000, -0.001910, -0.024801, -0.003698,  0.001978,  0.000000,  0.000237,
     0.103483, -0.046708, -0.000674, -0.000000,  0.591670,  0.018572, -0.000000, -0.052711,  0.013869, -0.000000, -0.011220, -0.000000,  0.020672,  0.385264,  0.045610,  0.003887, -0.000000, -0.034349, -0.086854, -0.027151,  0.011348, -0.000000,  0.024796,
    -0.006399, -0.002794, -0.020728, -0.000000,  0.075240,  0.004540, -0.000000, -0.006830,  0.001662, -0.000000, -0.000776, -0.000000,  0.003309,  0.045610,  0.006293, -0.000534, -0.000000, -0.003527, -0.027150, -0.004920,  0.003174, -0.000000,  0.002280,
    -0.020934, -0.004590,  0.057549, -0.000000,  0.015678, -0.002044, -0.000000,  0.001687,  0.001163, -0.000000, -0.001358, -0.000000, -0.001484,  0.003887, -0.000534,  0.002844, -0.000000,  0.000414,  0.026847,  0.003002, -0.001003, -0.000000,  0.002046,
     0.000000,  0.000000,  0.000000,  0.095499, -0.000000,  0.000000,  0.002839,  0.000000, -0.000000,  0.002231, -0.000000,  0.001723, -0.000000, -0.000000, -0.000000, -0.000000,  0.005098,  0.000000, -0.000000, -0.000000,  0.000000,  0.005100, -0.000000,
    -0.054696,  0.004955,  0.015288,  0.000000, -0.037217,  0.000057,  0.000000,  0.005596, -0.000387,  0.000000,  0.000830,  0.000000, -0.001910, -0.034349, -0.003527,  0.000414,  0.000000,  0.004478,  0.004734,  0.002495,  0.000829,  0.000000, -0.001752,
     0.103549, -0.046789,  0.572390, -0.000000, -0.149798, -0.046434, -0.000000,  0.031253,  0.002004, -0.000000, -0.011224, -0.000000, -0.024801, -0.086854, -0.027150,  0.026847, -0.000000,  0.004734,  0.385317,  0.045600, -0.032272, -0.000000,  0.012414,
    -0.006345, -0.002804,  0.067538, -0.000000, -0.039051, -0.005478, -0.000000,  0.006109, -0.000168, -0.000000, -0.000775, -0.000000, -0.003698, -0.027151, -0.004920,  0.003002, -0.000000,  0.002495,  0.045600,  0.006290, -0.003549, -0.000000,  0.000370,
    -0.058243,  0.003646, -0.023630,  0.000000,  0.036435,  0.005546,  0.000000, -0.001915,  0.001015,  0.000000,  0.000461,  0.000000,  0.001978,  0.011348,  0.003174, -0.001003,  0.000000,  0.000829, -0.032272, -0.003549,  0.004580,  0.000000, -0.000036,
     0.000000,  0.000000,  0.000000,  0.095535,  0.000000,  0.000000,  0.002840,  0.000000, -0.000000,  0.002231, -0.000000,  0.001724,  0.000000, -0.000000, -0.000000, -0.000000,  0.005100,  0.000000, -0.000000, -0.000000,  0.000000,  0.005102, -0.000000,
    -0.006476, -0.005689,  0.036825, -0.000000,  0.043991, -0.000289, -0.000000, -0.001978,  0.001534, -0.000000, -0.001523, -0.000000,  0.000237,  0.024796,  0.002280,  0.002046, -0.000000, -0.001752,  0.012414,  0.000370, -0.000036, -0.000000,  0.002747;
  // clang-format on
  ASSERT_TRUE(densityMatrix.restrictedMatrix().isApprox(refDensity));

  // parser with matrix info additional output
  ExternalQC::Cp2kMainOutputParser parser2((pathToResource / "cp2k_bo_test_calc.out").string(),
                                           (pathToResource / "cp2k_reference_additional_output-1_0.Log").string());
  auto densityMatrix2 = parser2.getDensityMatrix(SpinMode::Restricted);
  ASSERT_TRUE(densityMatrix2.restrictedMatrix().isApprox(refDensity));

  ExternalQC::Cp2kMainOutputParser parser3((pathToResource / "cp2k_bo_unrestricted_test_calc.out").string());
  auto densityMatrix3 = parser3.getDensityMatrix(SpinMode::Unrestricted);
  Eigen::MatrixXd refAlpha(23, 23);
  // clang-format off
  refAlpha <<
    0.745580,   -0.021302,    -0.219328,     0.000000,-0.169390,    -0.026637,     0.000000,    -0.020585,-0.011493,     0.000000,     0.000642,     0.000000, 0.003001,     0.051742,    -0.003200,    -0.010467, 0.000000,    -0.027348,     0.051774,    -0.003172,-0.029121,     0.000000,    -0.003238,
   -0.021302,    0.007359,    -0.042517,     0.000000,-0.032817,     0.002341,     0.000000,     0.001798,-0.001141,     0.000000,     0.001725,     0.000000, 0.000299,    -0.023354,    -0.001397,    -0.002295, 0.000000,     0.002477,    -0.023394,    -0.001402, 0.001823,     0.000000,    -0.002844,
   -0.219328,   -0.042517,     0.590605,     0.000000, 0.097048,    -0.023282,    -0.000000,     0.022768, 0.010395,     0.000000,    -0.012785,     0.000000,-0.017443,    -0.000337,    -0.010364,     0.028775, 0.000000,     0.007644,     0.286195,     0.033769,-0.011815,     0.000000,     0.018412,
    0.000000,    0.000000,     0.000000,     0.894391, 0.000000,     0.000000,     0.026585,     0.000000,-0.000000,     0.020891,    -0.000000,     0.016138, 0.000000,    -0.000000,    -0.000000,    -0.000000, 0.047749,     0.000000,    -0.000000,    -0.000000, 0.000000,     0.047768,    -0.000000,
   -0.169390,   -0.032817,     0.097048,     0.000000, 0.539974,     0.022767,    -0.000000,    -0.035064, 0.015473,     0.000000,    -0.009879,     0.000000, 0.015037,     0.295835,     0.037620,     0.007839,-0.000000,    -0.018608,    -0.074899,    -0.019525, 0.018217,     0.000000,     0.021995,
   -0.026637,    0.002341,    -0.023282,     0.000000, 0.022767,     0.003558,     0.000000,    -0.001871, 0.000476,     0.000000,     0.000385,     0.000000, 0.001547,     0.009286,     0.002270,    -0.001022, 0.000000,     0.000028,    -0.023217,    -0.002739, 0.002773,     0.000000,    -0.000144,
    0.000000,    0.000000,    -0.000000,     0.026585,-0.000000,     0.000000,     0.000790,     0.000000,-0.000000,     0.000621,    -0.000000,     0.000480, 0.000000,    -0.000000,    -0.000000,    -0.000000, 0.001419,     0.000000,    -0.000000,    -0.000000, 0.000000,     0.001420,    -0.000000,
   -0.020585,    0.001798,     0.022768,     0.000000,-0.035064,    -0.001871,     0.000000,     0.004520,-0.000474,     0.000000,     0.000296,     0.000000,-0.002036,    -0.026355,    -0.003415,     0.000844, 0.000000,     0.002798,     0.015627,     0.003054,-0.000957,     0.000000,    -0.000989,
   -0.011493,   -0.001141,     0.010395,    -0.000000, 0.015473,     0.000476,    -0.000000,    -0.000474, 0.000572,    -0.000000,    -0.000389,    -0.000000, 0.000156,     0.006935,     0.000831,     0.000582,-0.000000,    -0.000194,     0.001002,    -0.000084, 0.000508,    -0.000000,     0.000767,
    0.000000,    0.000000,     0.000000,     0.020891, 0.000000,     0.000000,     0.000621,     0.000000,-0.000000,     0.000488,    -0.000000,     0.000377,-0.000000,    -0.000000,    -0.000000,    -0.000000, 0.001115,     0.000000,    -0.000000,    -0.000000, 0.000000,     0.001116,    -0.000000,
    0.000642,    0.001725,    -0.012785,    -0.000000,-0.009879,     0.000385,    -0.000000,     0.000296,-0.000389,    -0.000000,     0.000451,    -0.000000, 0.000101,    -0.005610,    -0.000388,    -0.000679,-0.000000,     0.000415,    -0.005612,    -0.000388, 0.000231,    -0.000000,    -0.000762,
    0.000000,    0.000000,     0.000000,     0.016138, 0.000000,     0.000000,     0.000480,     0.000000,-0.000000,     0.000377,    -0.000000,     0.000291, 0.000000,    -0.000000,    -0.000000,    -0.000000, 0.000862,     0.000000,    -0.000000,    -0.000000, 0.000000,     0.000862,    -0.000000,
    0.003001,    0.000299,    -0.017443,     0.000000, 0.015037,     0.001547,     0.000000,    -0.002036, 0.000156,    -0.000000,     0.000101,     0.000000, 0.001129,     0.010336,     0.001655,    -0.000742,-0.000000,    -0.000955,    -0.012401,    -0.001849, 0.000989,     0.000000,     0.000119,
    0.051742,   -0.023354,    -0.000337,    -0.000000, 0.295835,     0.009286,    -0.000000,    -0.026355, 0.006935,    -0.000000,    -0.005610,    -0.000000, 0.010336,     0.192632,     0.022805,     0.001943,-0.000000,    -0.017175,    -0.043427,    -0.013576, 0.005674,    -0.000000,     0.012398,
   -0.003200,   -0.001397,    -0.010364,    -0.000000, 0.037620,     0.002270,    -0.000000,    -0.003415, 0.000831,    -0.000000,    -0.000388,    -0.000000, 0.001655,     0.022805,     0.003147,    -0.000267,-0.000000,    -0.001764,    -0.013575,    -0.002460, 0.001587,    -0.000000,     0.001140,
   -0.010467,   -0.002295,     0.028775,    -0.000000, 0.007839,    -0.001022,    -0.000000,     0.000844, 0.000582,    -0.000000,    -0.000679,    -0.000000,-0.000742,     0.001943,    -0.000267,     0.001422,-0.000000,     0.000207,     0.013423,     0.001501,-0.000501,    -0.000000,     0.001023,
    0.000000,    0.000000,     0.000000,     0.047749,-0.000000,     0.000000,     0.001419,     0.000000,-0.000000,     0.001115,    -0.000000,     0.000862,-0.000000,    -0.000000,    -0.000000,    -0.000000, 0.002549,     0.000000,    -0.000000,    -0.000000, 0.000000,     0.002550,    -0.000000,
   -0.027348,    0.002477,     0.007644,     0.000000,-0.018608,     0.000028,     0.000000,     0.002798,-0.000194,     0.000000,     0.000415,     0.000000,-0.000955,    -0.017175,    -0.001764,     0.000207, 0.000000,     0.002239,     0.002367,     0.001247, 0.000414,     0.000000,    -0.000876,
    0.051774,   -0.023394,     0.286195,    -0.000000,-0.074899,    -0.023217,    -0.000000,     0.015627, 0.001002,    -0.000000,    -0.005612,    -0.000000,-0.012401,    -0.043427,    -0.013575,     0.013423,-0.000000,     0.002367,     0.192658,     0.022800,-0.016136,    -0.000000,     0.006207,
   -0.003172,   -0.001402,     0.033769,    -0.000000,-0.019525,    -0.002739,    -0.000000,     0.003054,-0.000084,    -0.000000,    -0.000388,    -0.000000,-0.001849,    -0.013576,    -0.002460,     0.001501,-0.000000,     0.001247,     0.022800,     0.003145,-0.001775,    -0.000000,     0.000185,
   -0.029121,    0.001823,    -0.011815,     0.000000, 0.018217,     0.002773,     0.000000,    -0.000957, 0.000508,     0.000000,     0.000231,     0.000000, 0.000989,     0.005674,     0.001587,    -0.000501, 0.000000,     0.000414,    -0.016136,    -0.001775, 0.002290,     0.000000,    -0.000018,
    0.000000,    0.000000,     0.000000,     0.047768, 0.000000,     0.000000,     0.001420,     0.000000,-0.000000,     0.001116,    -0.000000,     0.000862, 0.000000,    -0.000000,    -0.000000,    -0.000000, 0.002550,     0.000000,    -0.000000,    -0.000000, 0.000000,     0.002551,    -0.000000,
   -0.003238,   -0.002844,     0.018412,    -0.000000, 0.021995,    -0.000144,    -0.000000,    -0.000989, 0.000767,    -0.000000,    -0.000762,    -0.000000, 0.000119,     0.012398,     0.001140,     0.001023,-0.000000,    -0.000876,     0.006207,     0.000185,-0.000018,    -0.000000,     0.001373;
  // clang-format on
  ASSERT_TRUE(densityMatrix3.alphaMatrix().isApprox(refAlpha));
  ASSERT_TRUE(densityMatrix3.betaMatrix().isApprox(refAlpha)); // alpha and beta are identical
}

TEST_F(ACp2kTest, OverlapMatrixIsParsedCorrectly) {
  ExternalQC::Cp2kMainOutputParser parser((pathToResource / "cp2k_bo_test_calc.out").string());
  auto overlapMatrix = parser.getOverlapMatrix();
  Eigen::MatrixXd refOverlap(23, 23);
  // clang-format off
  refOverlap <<
    1.000000,   -0.088209,     0.000000,     0.000000, 0.000000,     0.000000,     0.000000,     0.000000, 0.000000,     0.000000,     0.000000,     0.000000, 0.000000,     0.449119,     0.504268,    -0.000000,-0.000000,    -0.555015,     0.449359,     0.504322,-0.537149,     0.000000,     0.139869,
   -0.088209,    1.000000,    -0.000000,    -0.000000, 0.000000,     0.000000,     0.000000,     0.000000, 0.000000,    -0.000000,    -0.000000,     0.000000, 0.000000,     0.292276,     0.490976,    -0.000000,-0.000000,    -0.007838,     0.292188,     0.491074,-0.007362,     0.000000,     0.001917,
    0.000000,   -0.000000,     1.000000,    -0.000000, 0.000000,     0.176540,     0.000000,     0.000000, 0.000000,     0.000000,    -0.000000,     0.000000,-0.000000,     0.000000,     0.000000,     0.434036,-0.000000,    -0.000000,     0.449560,     0.141853,-0.016910,     0.000000,     0.117469,
    0.000000,   -0.000000,    -0.000000,     1.000000, 0.000000,     0.000000,     0.176540,     0.000000, 0.000000,     0.000000,     0.000000,     0.000000, 0.000000,     0.000000,     0.000000,    -0.000000, 0.434036,    -0.000000,    -0.000000,    -0.000000, 0.000000,     0.434216,    -0.000000,
    0.000000,    0.000000,     0.000000,     0.000000, 1.000000,     0.000000,     0.000000,     0.176540, 0.000000,     0.000000,     0.000000,     0.000000, 0.000000,     0.464427,     0.146723,    -0.000000,-0.000000,    -0.047692,    -0.117062,    -0.036937, 0.117469,    -0.000000,     0.403628,
    0.000000,    0.000000,     0.176540,     0.000000, 0.000000,     1.000000,    -0.000000,     0.000000, 0.000000,    -0.000000,     0.000000,     0.000000, 0.000000,     0.000000,     0.000000,     0.564667,-0.000000,    -0.000000,     0.424621,     0.350492, 0.404531,     0.000000,     0.041715,
    0.000000,    0.000000,     0.000000,     0.176540, 0.000000,    -0.000000,     1.000000,     0.000000, 0.000000,    -0.000000,    -0.000000,     0.000000, 0.000000,     0.000000,     0.000000,    -0.000000, 0.564667,    -0.000000,    -0.000000,    -0.000000, 0.000000,     0.564731,    -0.000000,
    0.000000,    0.000000,     0.000000,     0.000000, 0.176540,     0.000000,     0.000000,     1.000000,-0.000000,     0.000000,     0.000000,    -0.000000, 0.000000,     0.438912,     0.362217,    -0.000000,-0.000000,     0.393351,    -0.110568,    -0.091265, 0.041715,    -0.000000,     0.553869,
    0.000000,    0.000000,     0.000000,     0.000000, 0.000000,     0.000000,     0.000000,    -0.000000, 1.000000,     0.000000,     0.000000,    -0.000000, 0.000000,     0.000000,    -0.000000,     0.392074,-0.000000,    -0.000000,    -0.153185,     0.035998, 0.056358,    -0.000000,     0.339110,
    0.000000,   -0.000000,     0.000000,     0.000000, 0.000000,    -0.000000,    -0.000000,     0.000000, 0.000000,     1.000000,    -0.000000,     0.000000, 0.000000,     0.000000,    -0.000000,     0.000000, 0.000000,    -0.000000,    -0.000000,     0.000000, 0.000000,     0.379517,    -0.000000,
    0.000000,   -0.000000,    -0.000000,     0.000000, 0.000000,     0.000000,    -0.000000,     0.000000, 0.000000,    -0.000000,     1.000000,     0.000000, 0.000000,    -0.181327,     0.042564,    -0.000000, 0.000000,    -0.036496,    -0.181339,     0.042614,-0.035413,    -0.000000,     0.009221,
    0.000000,    0.000000,     0.000000,     0.000000, 0.000000,     0.000000,     0.000000,    -0.000000,-0.000000,     0.000000,     0.000000,     1.000000, 0.000000,     0.000000,    -0.000000,    -0.000000, 0.392074,    -0.000000,     0.000000,    -0.000000,-0.000000,    -0.098823,    -0.000000,
    0.000000,    0.000000,    -0.000000,     0.000000, 0.000000,     0.000000,     0.000000,     0.000000, 0.000000,     0.000000,     0.000000,     0.000000, 1.000000,     0.314068,    -0.073723,    -0.000000,-0.000000,     0.063212,    -0.274200,     0.064436,-0.101745,    -0.000000,    -0.171153,
    0.449119,    0.292276,     0.000000,     0.000000, 0.464427,     0.000000,     0.000000,     0.438912, 0.000000,     0.000000,    -0.181327,     0.000000, 0.314068,     1.000000,     0.452906,     0.000000, 0.000000,     0.000000,     0.174110,     0.359040,-0.240635,    -0.000000,     0.311411,
    0.504268,    0.490976,     0.000000,     0.000000, 0.146723,     0.000000,     0.000000,     0.362217,-0.000000,    -0.000000,     0.042564,    -0.000000,-0.073723,     0.452906,     1.000006,     0.000000, 0.000000,     0.000000,     0.359040,     0.602262,-0.277326,    -0.000000,     0.358895,
   -0.000000,   -0.000000,     0.434036,    -0.000000,-0.000000,     0.564667,    -0.000000,    -0.000000, 0.392074,     0.000000,    -0.000000,    -0.000000,-0.000000,     0.000000,     0.000000,     0.999984,-0.000000,     0.000000,     0.240635,     0.277326, 0.224498,    -0.000000,     0.232489,
   -0.000000,   -0.000000,    -0.000000,     0.434036,-0.000000,    -0.000000,     0.564667,    -0.000000,-0.000000,     0.000000,     0.000000,     0.392074,-0.000000,     0.000000,     0.000000,    -0.000000, 0.999984,     0.000000,     0.000000,     0.000000,-0.000000,     0.404161,     0.000000,
   -0.555015,   -0.007838,    -0.000000,    -0.000000,-0.047692,    -0.000000,    -0.000000,     0.393351,-0.000000,    -0.000000,    -0.036496,    -0.000000, 0.063212,     0.000000,     0.000000,     0.000000, 0.000000,     0.999984,    -0.311411,    -0.358895, 0.232489,     0.000000,     0.103268,
    0.449359,    0.292188,     0.449560,    -0.000000,-0.117062,     0.424621,    -0.000000,    -0.110568,-0.153185,    -0.000000,    -0.181339,     0.000000,-0.274200,     0.174110,     0.359040,     0.240635, 0.000000,    -0.311411,     1.000000,     0.452906,-0.000000,     0.000000,     0.000000,
    0.504322,    0.491074,     0.141853,    -0.000000,-0.036937,     0.350492,    -0.000000,    -0.091265, 0.035998,     0.000000,     0.042614,    -0.000000, 0.064436,     0.359040,     0.602262,     0.277326, 0.000000,    -0.358895,     0.452906,     1.000006,-0.000000,     0.000000,     0.000000,
   -0.537149,   -0.007362,    -0.016910,     0.000000, 0.117469,     0.404531,     0.000000,     0.041715, 0.056358,     0.000000,    -0.035413,    -0.000000,-0.101745,    -0.240635,    -0.277326,     0.224498,-0.000000,     0.232489,    -0.000000,    -0.000000, 0.999984,     0.000000,     0.000000,
    0.000000,    0.000000,     0.000000,     0.434216,-0.000000,     0.000000,     0.564731,    -0.000000,-0.000000,     0.379517,    -0.000000,    -0.098823,-0.000000,    -0.000000,    -0.000000,    -0.000000, 0.404161,     0.000000,     0.000000,     0.000000, 0.000000,     0.999984,    -0.000000,
    0.139869,    0.001917,     0.117469,    -0.000000, 0.403628,     0.041715,    -0.000000,     0.553869, 0.339110,    -0.000000,     0.009221,    -0.000000,-0.171153,     0.311411,     0.358895,     0.232489, 0.000000,     0.103268,     0.000000,     0.000000, 0.000000,    -0.000000,     0.999984;
  // clang-format on
  ASSERT_TRUE(overlapMatrix.isApprox(refOverlap));
  // parser with matrix info additional output
  ExternalQC::Cp2kMainOutputParser parser2((pathToResource / "cp2k_bo_test_calc.out").string(),
                                           (pathToResource / "cp2k_reference_additional_output-1_0.Log").string());
  auto overlapMatrix2 = parser2.getOverlapMatrix();
  ASSERT_TRUE(overlapMatrix2.isApprox(refOverlap));
}

TEST_F(ACp2kTest, NumberOfSphericalsIsParsedCorrectly) {
  ExternalQC::Cp2kMainOutputParser parser((pathToResource / "cp2k_bo_test_calc.out").string());
  ElementTypeCollection elements = {ElementType::O, ElementType::H, ElementType::H};
  auto indices = parser.getAtomAoIndex(elements);
  ASSERT_THAT(indices.getNAtoms(), 3);
  ASSERT_THAT(indices.getNAtomicOrbitals(), parser.getNumberOfAos());
  ASSERT_THAT(indices.getNOrbitals(0), 13);
  ASSERT_THAT(indices.getNOrbitals(1), 5);
  ASSERT_THAT(indices.getNOrbitals(2), 5);
}

TEST_F(ACp2kTest, BondOrdersAreParsedCorrectly) {
  ElementTypeCollection elements = {ElementType::O, ElementType::H, ElementType::H};
  auto refBo = BondOrderCollection(elements.size());
  refBo.setOrder(0, 1, 1.0);
  refBo.setOrder(0, 2, 1.0);
  // restricted
  ExternalQC::Cp2kMainOutputParser parser1((pathToResource / "cp2k_bo_test_calc.out").string());
  auto bo1 = parser1.getBondOrders(elements, SpinMode::Restricted);
  // unrestricted
  ExternalQC::Cp2kMainOutputParser parser2((pathToResource / "cp2k_bo_unrestricted_test_calc.out").string());
  auto bo2 = parser2.getBondOrders(elements, SpinMode::Unrestricted);
  for (unsigned long i = 0; i < elements.size() - 1; ++i) {
    for (unsigned long j = i; j < elements.size(); ++j) {
      ASSERT_THAT(bo1.getOrder(i, j) > 0.1, refBo.getOrder(i, j) > 0.1);
      ASSERT_THAT(bo2.getOrder(i, j) > 0.1, refBo.getOrder(i, j) > 0.1);
    }
  }
}

TEST_F(ACp2kTest, CheckResultsClearing1) {
  calculator.results().set<Property::Energy>(42.0);
  std::stringstream stream("5\n\n"
                           "C     0.00000000   0.00000001  -0.00000097\n"
                           "H     0.62612502   0.62612484   0.62613824\n"
                           "H    -0.62612503  -0.62612486   0.62613824\n"
                           "H    -0.62612481   0.62612463  -0.62613657\n"
                           "H     0.62612481  -0.62612464  -0.62613657\n");

  auto structure = Utils::XyzStreamHandler::read(stream);
  calculator.setStructure(structure);
  ASSERT_FALSE(calculator.results().has<Property::Energy>());
}

TEST_F(ACp2kTest, CheckResultsClearing2) {
  std::stringstream stream("5\n\n"
                           "C     0.00000000   0.00000001  -0.00000097\n"
                           "H     0.62612502   0.62612484   0.62613824\n"
                           "H    -0.62612503  -0.62612486   0.62613824\n"
                           "H    -0.62612481   0.62612463  -0.62613657\n"
                           "H     0.62612481  -0.62612464  -0.62613657\n");

  auto structure = Utils::XyzStreamHandler::read(stream);
  calculator.setStructure(structure);
  calculator.results().set<Property::Energy>(42.0);
  calculator.modifyPositions(structure.getPositions());
  ASSERT_FALSE(calculator.results().has<Property::Energy>());
}

TEST_F(ACp2kTest, CloneInterfaceWorksCorrectly) {
  calculator.settings().modifyInt(Utils::SettingsNames::externalProgramNProcs, 2);
  calculator.settings().modifyString(Utils::ExternalQC::SettingsNames::baseWorkingDirectory, pathToResource.string());

  std::stringstream stream("5\n\n"
                           "C     0.00000000   0.00000001  -0.00000097\n"
                           "H     0.62612502   0.62612484   0.62613824\n"
                           "H    -0.62612503  -0.62612486   0.62613824\n"
                           "H    -0.62612481   0.62612463  -0.62613657\n"
                           "H     0.62612481  -0.62612464  -0.62613657\n");

  auto structure = Utils::XyzStreamHandler::read(stream);
  calculator.setStructure(structure);
  calculator.results().set<Property::Energy>(42.0);
  auto newCalculator = calculator.clone();

  ASSERT_THAT(calculator.getPositions()(3, 1), Eq(newCalculator->getPositions()(3, 1)));
  ASSERT_THAT(calculator.getPositions()(4, 2), Eq(newCalculator->getPositions()(4, 2)));
  ASSERT_THAT(calculator.results().get<Property::Energy>(), Eq(newCalculator->results().get<Property::Energy>()));
  ASSERT_THAT(calculator.settings().getInt(Utils::SettingsNames::externalProgramNProcs),
              Eq(newCalculator->settings().getInt(Utils::SettingsNames::externalProgramNProcs)));
  ASSERT_THAT(calculator.settings().getString(Utils::ExternalQC::SettingsNames::baseWorkingDirectory),
              Eq(newCalculator->settings().getString(Utils::ExternalQC::SettingsNames::baseWorkingDirectory)));
}

TEST_F(ACp2kTest, StatesHandlingAndInputCreationWorkCorrectly) {
  // Set up.
  siSetUp();

  // set incorrect charge/multiplicity pair
  calculator.settings().modifyInt(Utils::SettingsNames::molecularCharge, 1);
  ASSERT_THROW(calculator.calculate(""), Core::UnsuccessfulCalculationException);
  calculator.settings().modifyInt(Utils::SettingsNames::molecularCharge, 0);

  calculator.settings().modifyInt(Utils::SettingsNames::maxScfIterations, 1);

  try {
    calculator.calculate("");
  }
  catch (Core::UnsuccessfulCalculationException& e) {
  }

  // Check that the states handler works.
  std::string testString = "Test";
  std::string wfnFileName = NativeFilenames::combinePathSegments(calculator.getCalculationDirectory(),
                                                                 calculator.getFileNameBase() + "-RESTART.wfn");
  std::string inputFileName =
      NativeFilenames::combinePathSegments(calculator.getCalculationDirectory(), calculator.getFileNameBase() + ".inp");
  std::ofstream wfn;
  wfn.open(wfnFileName);
  if (wfn.is_open()) {
    wfn << testString << std::endl;
  }
  wfn.close();

  auto state = calculator.getState();

  wfn.open(wfnFileName);
  if (wfn.is_open()) {
    wfn << "Changed Content" << std::endl;
  }
  wfn.close();

  calculator.loadState(state);

  std::string wfnContent;
  std::ifstream check;
  check.open(wfnFileName);
  if (check.is_open()) {
    check >> wfnContent;
  }
  check.close();

  ASSERT_THAT(wfnContent, Eq(testString));

  // Check whether the calculation directory can be deleted.
  bool isDir = FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
  boost::filesystem::remove_all(calculator.getCalculationDirectory());
  bool deleted = !FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
  ASSERT_THAT(isDir, Eq(true));
  ASSERT_THAT(deleted, Eq(true));
}

TEST_F(ACp2kTest, SpinModeInputKeywordWorksCorrectly) {
  siSetUp();
  calculator.settings().modifyString(Utils::SettingsNames::spinMode, "unrestricted");
  calculator.settings().modifyInt(Utils::SettingsNames::maxScfIterations, 1);

  try {
    calculator.calculate("");
  }
  catch (Core::UnsuccessfulCalculationException& e) {
  }

  std::string inputFileName =
      NativeFilenames::combinePathSegments(calculator.getCalculationDirectory(), calculator.getFileNameBase() + ".inp");
  std::ifstream input;
  input.open(inputFileName);
  auto content = std::string(std::istreambuf_iterator<char>{input}, {});
  input.close();

  std::string regexString = "UKS\\s+";
  std::regex regex(regexString);
  std::smatch matches;
  bool b = std::regex_search(content, matches, regex);

  ASSERT_TRUE(b);

  // Check whether the calculation directory can be deleted.
  bool isDir = FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
  boost::filesystem::remove_all(calculator.getCalculationDirectory());
  bool deleted = !FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
  ASSERT_THAT(isDir, Eq(true));
  ASSERT_THAT(deleted, Eq(true));
}

TEST_F(ACp2kTest, TemporaryFilesAreDeletedCorrectly) {
  // Set up.
  siSetUp();
  calculator.settings().modifyInt(Utils::SettingsNames::maxScfIterations, 1);

  // Define calculation directory
  boost::filesystem::path calcDirPath(calculator.getCalculationDirectory());
  const auto& calcDir = calcDirPath.string();

  // Create calculation directory
  if (!calculator.getCalculationDirectory().empty()) {
    FilesystemHelpers::createDirectories(calcDir);
  }

  // Create some temporary files
  std::string filename1 = NativeFilenames::combinePathSegments(calcDir, "1.bak");
  std::string filename2 = NativeFilenames::combinePathSegments(calcDir, "2.bak-1");
  std::string filename3 = NativeFilenames::combinePathSegments(calcDir, "abc.bak");
  std::string filenameToKeep = NativeFilenames::combinePathSegments(calcDir, "keep_this_file.txt");
  std::ofstream file1{filename1};
  file1.close();
  std::ofstream file2{filename2};
  file2.close();
  std::ofstream file3{filename3};
  file3.close();
  std::ofstream fileToKeep{filenameToKeep};
  fileToKeep.close();

  try {
    calculator.calculate("");
  }
  catch (Core::UnsuccessfulCalculationException& e) {
  }

  // Check that all of the .bak files were correctly deleted
  ASSERT_FALSE(boost::filesystem::exists(filename1));
  ASSERT_FALSE(boost::filesystem::exists(filename2));
  ASSERT_FALSE(boost::filesystem::exists(filename3));

  // Check that the .txt file still exists
  ASSERT_TRUE(boost::filesystem::exists(filenameToKeep));

  // Repeat the same procedure, but with the tmp file removal setting disabled
  calculator.settings().modifyBool(Utils::ExternalQC::SettingsNames::deleteTemporaryFiles, false);

  // Create the temporary files again
  std::string filename4 = NativeFilenames::combinePathSegments(calcDir, "3.bak");
  std::string filename5 = NativeFilenames::combinePathSegments(calcDir, "4.bak-1");
  std::string filename6 = NativeFilenames::combinePathSegments(calcDir, "xyz.bak");
  std::ofstream file4{filename4};
  file4.close();
  std::ofstream file5{filename5};
  file5.close();
  std::ofstream file6{filename6};
  file6.close();

  // Check that all of the .bak files still exist
  ASSERT_TRUE(boost::filesystem::exists(filename4));
  ASSERT_TRUE(boost::filesystem::exists(filename5));
  ASSERT_TRUE(boost::filesystem::exists(filename6));

  // Check that the .txt file still exists
  ASSERT_TRUE(boost::filesystem::exists(filenameToKeep));

  // Check whether the calculation directory can be deleted.
  bool isDir = FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
  boost::filesystem::remove_all(calculator.getCalculationDirectory());
  bool deleted = !FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
  ASSERT_THAT(isDir, Eq(true));
  ASSERT_THAT(deleted, Eq(true));
}

TEST_F(ACp2kTest, Cp2kCalculationIsPerformedCorrectlyViaScine) {
#ifndef _WIN32
  const char* envVariablePtr = std::getenv("CP2K_BINARY_PATH");
  if (envVariablePtr) {
    // Set-up
    siSetUp();
    calculator.setRequiredProperties(Property::Energy);

    // Calculate
    const auto& results = calculator.calculate("");
    // Assert energy
    ASSERT_THAT(results.get<Property::Energy>(), DoubleNear(-30.904384029122717, 1e-7));

    // Check whether the calculation directory can be deleted.
    bool isDir = FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
    boost::filesystem::remove_all(calculator.getCalculationDirectory());
    bool deleted = !FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
    ASSERT_THAT(isDir, Eq(true));
    ASSERT_THAT(deleted, Eq(true));
  }
  else {
    auto logger = Core::Log();
    logger.output << "Cp2k calculations were not tested directly as no binary path was specified." << Core::Log::endl;
  }
#endif
}

TEST_F(ACp2kTest, Cp2kSemiempiricalCalculationIsPerformedCorrectlyViaScine) {
#ifndef _WIN32
  const char* envVariablePtr = std::getenv("CP2K_BINARY_PATH");
  if (envVariablePtr) {
    // Set-up
    siSetUp();
    calculator.setRequiredProperties(Property::Energy);
    calculator.settings().modifyString(Utils::SettingsNames::method, "GFN1");
    calculator.settings().modifyString(Utils::SettingsNames::basisSet, "");
    calculator.settings().modifyDouble(Utils::SettingsNames::selfConsistenceCriterion, 1e-6);

    // Calculate
    const auto& results = calculator.calculate("");
    // Assert energy
    ASSERT_THAT(results.get<Property::Energy>(), DoubleNear(-14.556796617316774, 1e-6));

    // Check whether the calculation directory can be deleted.
    bool isDir = FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
    boost::filesystem::remove_all(calculator.getCalculationDirectory());
    bool deleted = !FilesystemHelpers::isDirectory(calculator.getCalculationDirectory());
    ASSERT_THAT(isDir, Eq(true));
    ASSERT_THAT(deleted, Eq(true));
  }
  else {
    auto logger = Core::Log();
    logger.output << "Cp2k calculations were not tested directly as no binary path was specified." << Core::Log::endl;
  }
#endif
}

TEST_F(ACp2kTest, CutoffDataIsWorking) {
  // setup data
  double energy = 0.0;
  double cutoff1 = 200.0;
  double cutoff2 = 300.0;
  double relCutoff1 = 40.0;
  double relCutoff2 = 50.0;
  std::vector<int> gridCounts1 = {3, 1, 4, 1};
  std::vector<int> gridCounts2 = {4, 2, 0, 0};
  auto data1 = ExternalQC::Cp2kCutoffData(cutoff1, relCutoff1, energy, gridCounts1);
  auto data2 = ExternalQC::Cp2kCutoffData(cutoff2, relCutoff2, energy, gridCounts2);
  auto container = ExternalQC::Cp2kCutoffDataContainer();
  container.add(data1);
  container.add(data2);
  // test
  ASSERT_TRUE(container.has(cutoff1, relCutoff1));
  ASSERT_TRUE(container.has(cutoff2, relCutoff2));
  auto counts1 = container.getData(cutoff1, relCutoff1).getGridCounts();
  auto counts2 = container.getData(cutoff2, relCutoff2).getGridCounts();
  for (unsigned long i = 0; i < counts1.size(); ++i) {
    ASSERT_EQ(gridCounts1[i], counts1[i]);
    ASSERT_EQ(gridCounts2[i], counts2[i]);
  }
  double cutoff3 = 250.1;
  double relCutoff3 = 50.0;
  std::vector<int> gridCounts3 = {4, 2, 0, 0};
  ASSERT_FALSE(container.has(cutoff3, relCutoff3));
  ASSERT_THROW(container.getData(cutoff3, relCutoff3), std::runtime_error);
  container.add(ExternalQC::Cp2kCutoffData(cutoff3, relCutoff3, energy, gridCounts3));
  ASSERT_TRUE(container.has(cutoff3, relCutoff3));
  ASSERT_DOUBLE_EQ(container.getData(cutoff2, relCutoff2).getEnergy(), energy);
}

TEST_F(ACp2kTest, AutomatedCutoffSelectionWithLiveCalculatorIsWorking) {
#ifndef _WIN32
  const char* envVariablePtr = std::getenv("CP2K_BINARY_PATH");
  if (envVariablePtr) {
    siSetUp();
    calculator.settings().modifyString(Utils::SettingsNames::method, "PADE");
    calculator.settings().modifyString(Utils::SettingsNames::basisSet, "SZV-MOLOPT-GTH");
    calculator.settings().modifyInt(ExternalQC::SettingsNames::nGrids, 4);
    ExternalQC::Cp2kCutoffOptimizer optimizer(calculator);
    optimizer.determineOptimalGridCutoffs();
    ASSERT_THAT(calculator.settings().getDouble(ExternalQC::SettingsNames::planeWaveCutoff), DoubleEq(350.0));
    ASSERT_THAT(calculator.settings().getDouble(ExternalQC::SettingsNames::relMultiGridCutoff), DoubleEq(70.0));
  }
  else {
    auto logger = Core::Log();
    logger.output << "Cp2k calculations were not tested directly as no binary path was specified." << Core::Log::endl;
  }
#endif
}

TEST_F(ACp2kTest, AutomatedCutoffSelectionWithDummyDataIsWorking) {
  // set-up dummy data
  ExternalQC::Cp2kCutoffDataContainer data;
  // clang-format off
  data.add(ExternalQC::Cp2kCutoffData(500.0, 100.0, -31.1264457247, {2800, 4800, 6104, 2024}));
  data.add(ExternalQC::Cp2kCutoffData(450.0, 100.0, -31.1264457241, {2800, 4832, 6072, 2024}));
  data.add(ExternalQC::Cp2kCutoffData(400.0, 100.0, -31.1264457242, {4464, 4240, 5000, 2024}));
  data.add(ExternalQC::Cp2kCutoffData(350.0, 100.0, -31.1264457243, {4464, 5792, 5440, 32}));
  data.add(ExternalQC::Cp2kCutoffData(300.0, 100.0, -31.1264456985, {4648, 5608, 5440, 32}));
  data.add(ExternalQC::Cp2kCutoffData(350.0,  90.0, -31.1264457244, {4464, 4240, 5000, 2024}));
  data.add(ExternalQC::Cp2kCutoffData(350.0,  80.0, -31.1264457244, {3360, 4272, 6072, 2024}));
  data.add(ExternalQC::Cp2kCutoffData(350.0,  70.0, -31.1264457244, {2800, 4800, 6104, 2024}));
  data.add(ExternalQC::Cp2kCutoffData(350.0,  60.0, -31.1264458115, {2160, 3984, 4920, 4664}));
  data.add(ExternalQC::Cp2kCutoffData(300.0,  70.0, -31.1264456988, {3360, 4272, 6072, 2024}));
  data.add(ExternalQC::Cp2kCutoffData(400.0,  70.0, -31.1264457245, {2160, 3984, 4920, 4664}));
  // clang-format on
  ExternalQC::Cp2kCutoffOptimizer optimizer(calculator, data);
  optimizer.determineOptimalGridCutoffs();
  ASSERT_THAT(calculator.settings().getDouble(ExternalQC::SettingsNames::planeWaveCutoff), DoubleEq(350.0));
  ASSERT_THAT(calculator.settings().getDouble(ExternalQC::SettingsNames::relMultiGridCutoff), DoubleEq(70.0));
}

TEST_F(ACp2kTest, ScfConvergenceIncreasedForPropertyCalculation) {
  // set low scf convergence criterion
  calculator.settings().modifyDouble(Utils::SettingsNames::selfConsistenceCriterion, 1e-4);
  // request Hessian calculation
  calculator.setRequiredProperties(Property::Energy | Property::Hessian);
  calculator.setLog(Core::Log::silent());
  // Trigger the applySettings() function via cloning
  ASSERT_THAT(calculator.settings().getDouble(Utils::SettingsNames::selfConsistenceCriterion), Eq(1e-4));
  auto secondCalculator = calculator.clone();
  ASSERT_THAT(secondCalculator->settings().getDouble(Utils::SettingsNames::selfConsistenceCriterion), Eq(1e-8));
  // request calculation of gradients
  calculator.setRequiredProperties(Property::Energy | Property::Gradients);
  auto thirdCalculator = calculator.clone();
  ASSERT_THAT(thirdCalculator->settings().getDouble(Utils::SettingsNames::selfConsistenceCriterion), Eq(1e-8));
}

} // namespace Tests
} // namespace Utils
} // namespace Scine
