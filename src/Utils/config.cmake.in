# Dependencies
include(CMakeFindDependencyMacro)

# This might seem like overkill, but it's best not to define
# Boost_USE_STATIC_LIBS if the user hasn't made a non-default choice (default
# is OFF). Additionally, we need to check that linking styles aren't mixed.
set(_COMPILED_WITH_STATIC_BOOST @Boost_USE_STATIC_LIBS@)
if(_COMPILED_WITH_STATIC_BOOST)
  if(DEFINED Boost_USE_STATIC_LIBS AND NOT Boost_USE_STATIC_LIBS)
    message(FATAL_ERROR "Scine Core was compiled with static boost, but you have set the use of the shared boost libraries! Cannot mix static and shared linking.")
  endif()
  set(Boost_USE_STATIC_LIBS ON)
endif()
unset(_COMPILED_WITH_STATIC_BOOST)

if(NOT TARGET Boost::filesystem OR NOT TARGET Boost::system)
  unset(Boost_FOUND)
  find_dependency(Boost REQUIRED COMPONENTS filesystem system)
endif()
find_dependency(Eigen3 3.3.1 REQUIRED)
find_dependency(yaml-cpp REQUIRED)
# If OpenMP was linked find it
if(@OpenMP_CXX_FOUND@)
  find_dependency(OpenMP)
endif()
# We are interface-dependent on Core, so those headers must also be available
find_dependency(ScineCore REQUIRED)

if(DEFINED SCINE_MARCH AND NOT "${SCINE_MARCH}" STREQUAL "@SCINE_MARCH@")
  message(FATAL_ERROR "You are trying to use an installed version of the SCINE Utils that was compiled with different -march flag values! Current march flags: ${SCINE_MARCH}, installed flags: @SCINE_MARCH@")
endif()
if(NOT DEFINED SCINE_MARCH)
  set(SCINE_MARCH "@SCINE_MARCH@")
endif()

if(NOT @BUILD_SHARED_LIBS@)
  find_dependency(irc REQUIRED)
endif()

include(${CMAKE_CURRENT_LIST_DIR}/ScineUtilsOSTargets.cmake)

@PACKAGE_INIT@

check_required_components(UtilsOS)
